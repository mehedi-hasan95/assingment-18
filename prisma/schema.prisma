// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  firstName    String         @db.VarChar(50)
  middleName   String         @db.VarChar(50)
  lastName     String         @db.VarChar(50)
  mobile       String         @db.VarChar(15)
  email        String         @db.VarChar(50)
  passwordHash String         @db.VarChar(32)
  registeredAt DateTime       @default(now()) @db.Timestamp(0)
  lastLogin    DateTime       @default(now()) @db.Timestamp(0)
  intro        String         @db.TinyText
  profile      String         @db.Text
  category     category[]
  post         post[]
  post_comment post_comment[]
}

model category {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  parentId      BigInt          @db.UnsignedBigInt
  title         String          @db.VarChar(75)
  metaTitle     String          @db.VarChar(100)
  slug          String          @db.VarChar(100)
  context       String          @db.Text
  user          user            @relation(fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  post_category post_category[]
}

model post {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  parentId      BigInt          @db.UnsignedBigInt
  title         String          @db.VarChar(75)
  metaTitle     String          @db.VarChar(100)
  slug          String          @db.VarChar(100)
  summary       String          @db.TinyText
  published     String          @db.TinyText
  createdAt     DateTime        @default(now()) @db.Timestamp(0)
  updatedAt     DateTime        @default(now()) @db.Timestamp(0)
  publishedAt   DateTime        @default(now()) @db.Timestamp(0)
  context       String          @db.Text
  user          user            @relation(fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  post_category post_category[]
  post_meta     post_meta[]
  post_tag      post_tag[]
  post_comment  post_comment[]
}

model post_category {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  postId     BigInt   @db.UnsignedBigInt
  categoryId BigInt   @db.UnsignedBigInt
  post       post     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  category   category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model post_meta {
  id      BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  key     String @db.VarChar(50)
  context String @db.Text
  postId  BigInt @db.UnsignedBigInt
  post    post   @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model tag {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  title     String     @db.VarChar(75)
  metaTitle String     @db.VarChar(100)
  slug      String     @db.VarChar(100)
  context   String     @db.Text
  post_tag  post_tag[]
}

model post_tag {
  id     BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  postId BigInt @db.UnsignedBigInt
  tagId  BigInt @db.UnsignedBigInt
  post   post   @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tag    tag    @relation(fields: [tagId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model post_comment {
  id          BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  postId      BigInt   @db.UnsignedBigInt
  parentId    BigInt   @db.UnsignedBigInt
  title       String   @db.VarChar(100)
  published   String   @db.TinyText
  content     String   @db.Text
  createdAt   DateTime @default(now()) @db.Timestamp(0)
  publishedAt DateTime @default(now()) @db.Timestamp(0)
  post        post     @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user        user     @relation(fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}
